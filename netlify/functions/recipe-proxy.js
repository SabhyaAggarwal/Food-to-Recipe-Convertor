exports.handler = async (event, context) => {
  // Set CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // Handle preflight OPTIONS request
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    // Get API key from environment variables
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'API key not configured' })
      };
    }

    // Parse request body
    let requestBody;
    try {
      requestBody = JSON.parse(event.body);
    } catch (e) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Invalid JSON in request body' })
      };
    }

    // Validate that prompt is provided
    if (!requestBody.prompt || typeof requestBody.prompt !== 'string') {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Prompt is required and must be a string' })
      };
    }

    // Check if this is an image-based request
    const hasImage = requestBody.imageData && requestBody.mimeType;
    
    // Prepare the request to Gemini API
    const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;
    
    let geminiRequestBody;
    
    if (hasImage) {
      // Handle image + text request
      geminiRequestBody = {
        contents: [
          {
            parts: [
              {
                text: requestBody.prompt
              },
              {
                inline_data: {
                  mime_type: requestBody.mimeType,
                  data: requestBody.imageData
                }
              }
            ]
          }
        ]
      };
    } else {
      // Handle text-only request
      geminiRequestBody = {
        contents: [
          {
            parts: [
              {
                text: requestBody.prompt
              }
            ]
          }
        ]
      };
    }

    // Make request to Gemini API
    const response = await fetch(geminiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(geminiRequestBody)
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      let errorMessage = 'Failed to generate recipe. Please try again';
      if (errorData && errorData.error && errorData.error.message) {
        errorMessage += ': ' + errorData.error.message;
      }
      
      return {
        statusCode: response.status,
        headers,
        body: JSON.stringify({ error: errorMessage })
      };
    }

    // Parse successful response
    const data = await response.json();
    const result = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!result) {
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: 'No recipe generated by the AI' })
      };
    }

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        recipe: result.trim()
      })
    };

  } catch (error) {
    console.error('Error in recipe-proxy function:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Internal server error' })
    };
  }
};